{"/home/travis/build/npmtest/node-npmtest-mongodb-migrations/test.js":"/* istanbul instrument in package npmtest_mongodb_migrations */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mongodb-migrations/lib.npmtest_mongodb_migrations.js":"/* istanbul instrument in package npmtest_mongodb_migrations */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mongodb_migrations = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mongodb_migrations = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mongodb-migrations/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mongodb-migrations && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mongodb_migrations */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mongodb_migrations\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mongodb_migrations.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mongodb_migrations.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mongodb_migrations.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mongodb_migrations.__dirname + '/lib.npmtest_mongodb_migrations.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mongodb-migrations/node_modules/mongodb-migrations/lib/mongodb-migrations.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Migrator, Promise, _, defaultLog, fs, migrationStub, mkdirp, mongoConnect, normalizeConfig, path, ref, repeatString,\n    slice = [].slice;\n\n  fs = require('fs');\n\n  path = require('path');\n\n  Promise = require('bluebird');\n\n  _ = require('lodash');\n\n  mkdirp = require('mkdirp');\n\n  ref = require('./utils'), repeatString = ref.repeatString, mongoConnect = ref.connect, normalizeConfig = ref.normalizeConfig;\n\n  migrationStub = require('./migration-stub');\n\n  defaultLog = function() {\n    var args, pad, src;\n    src = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    pad = repeatString(' ', src === 'system' ? 4 : 2);\n    return console.log.apply(console, [pad].concat(slice.call(args)));\n  };\n\n  Migrator = (function() {\n    function Migrator(dbConfig, logFn) {\n      dbConfig = normalizeConfig(dbConfig);\n      this._isDisposed = false;\n      this._m = [];\n      this._result = {};\n      this._dbReady = new Promise.fromCallback(function(cb) {\n        return mongoConnect(dbConfig, cb);\n      }).then((function(_this) {\n        return function(db) {\n          return _this._db = db;\n        };\n      })(this));\n      this._collName = dbConfig.collection;\n      this._timeout = dbConfig.timeout;\n      if (logFn || logFn === null) {\n        this.log = logFn;\n      } else {\n        this.log = defaultLog;\n      }\n    }\n\n    Migrator.prototype.add = function(m) {\n      return this._m.push(m);\n    };\n\n    Migrator.prototype.bulkAdd = function(array) {\n      return this._m = this._m.concat(array);\n    };\n\n    Migrator.prototype._coll = function() {\n      return this._db.collection(this._collName);\n    };\n\n    Migrator.prototype._runWhenReady = function(direction, cb, progress) {\n      var onError, onSuccess;\n      if (this._isDisposed) {\n        return cb(new Error('This migrator is disposed and cannot be used anymore'));\n      }\n      onSuccess = (function(_this) {\n        return function() {\n          _this._ranMigrations = {};\n          return _this._coll().find().toArray(function(err, docs) {\n            var doc, j, len;\n            if (err) {\n              return cb(err);\n            }\n            for (j = 0, len = docs.length; j < len; j++) {\n              doc = docs[j];\n              _this._ranMigrations[doc.id] = true;\n            }\n            return _this._run(direction, cb, progress);\n          });\n        };\n      })(this);\n      onError = function(err) {\n        return cb(err);\n      };\n      return this._dbReady.then(onSuccess, onError);\n    };\n\n    Migrator.prototype._run = function(direction, done, progress) {\n      var allDone, handleMigrationDone, i, l, log, logFn, m, migrationsCollection, migrationsCollectionUpdatePromises, runOne, systemLog, userLog;\n      if (direction === 'down') {\n        m = _(this._m).reverse().filter((function(_this) {\n          return function(m) {\n            var _r, ref1;\n            return (_r = (ref1 = _this._result[m.id]) != null ? ref1.status : void 0) && _r !== 'skip';\n          };\n        })(this)).value();\n      } else {\n        direction = 'up';\n        this._result = {};\n        m = this._m;\n      }\n      this._lastDirection = direction;\n      logFn = this.log;\n      log = function(src) {\n        return function(msg) {\n          return typeof logFn === \"function\" ? logFn(src, msg) : void 0;\n        };\n      };\n      userLog = log('user');\n      systemLog = log('system');\n      i = 0;\n      l = m.length;\n      migrationsCollection = this._coll();\n      migrationsCollectionUpdatePromises = [];\n      handleMigrationDone = function(id) {\n        var p;\n        p = direction === 'up' ? Promise.fromCallback(function(cb) {\n          return migrationsCollection.insert({\n            id: id\n          }, cb);\n        }) : Promise.fromCallback(function(cb) {\n          return migrationsCollection.deleteMany({\n            id: id\n          }, cb);\n        });\n        return migrationsCollectionUpdatePromises.push(p);\n      };\n      allDone = (function(_this) {\n        return function(err) {\n          return Promise.all(migrationsCollectionUpdatePromises).then(function() {\n            return done(err, _this._result);\n          });\n        };\n      })(this);\n      runOne = (function(_this) {\n        return function() {\n          var context, fn, id, isCallbackCalled, migration, migrationDone, skipCode, skipReason, timeoutId;\n          if (i >= l) {\n            return allDone();\n          }\n          migration = m[i];\n          i += 1;\n          migrationDone = function(res) {\n            var msg, ref1;\n            _this._result[migration.id] = res;\n            _.defer(function() {\n              return typeof progress === \"function\" ? progress(migration.id, res) : void 0;\n            });\n            msg = \"Migration '\" + migration.id + \"': \" + res.status;\n            if (res.status === 'skip') {\n              msg += \" (\" + res.reason + \")\";\n            }\n            systemLog(msg);\n            if (res.status === 'error') {\n              systemLog('  ' + res.error);\n            }\n            if (res.status === 'ok' || (res.status === 'skip' && ((ref1 = res.code) === 'no_up' || ref1 === 'no_down'))) {\n              return handleMigrationDone(migration.id);\n            }\n          };\n          fn = migration[direction];\n          id = migration.id;\n          skipReason = null;\n          skipCode = null;\n          if (!fn) {\n            skipReason = \"no migration function for direction \" + direction;\n            skipCode = \"no_\" + direction;\n          }\n          if (direction === 'up' && id in _this._ranMigrations) {\n            skipReason = \"migration already ran\";\n            skipCode = 'already_ran';\n          }\n          if (direction === 'down' && !(id in _this._result)) {\n            skipReason = \"migration wasn't in the recent `migrate` run\";\n            skipCode = 'not_in_recent_migrate';\n          }\n          if (skipReason) {\n            migrationDone({\n              status: 'skip',\n              reason: skipReason,\n              code: skipCode\n            });\n            return runOne();\n          }\n          isCallbackCalled = false;\n          if (_this._timeout) {\n            timeoutId = setTimeout(function() {\n              var err;\n              isCallbackCalled = true;\n              err = new Error(\"migration timed-out\");\n              migrationDone({\n                status: 'error',\n                error: err\n              });\n              return allDone(err);\n            }, _this._timeout);\n          }\n          context = {\n            db: _this._db,\n            log: userLog\n          };\n          return fn.call(context, function(err) {\n            if (isCallbackCalled) {\n              return;\n            }\n            clearTimeout(timeoutId);\n            if (err) {\n              migrationDone({\n                status: 'error',\n                error: err\n              });\n              return allDone(err);\n            } else {\n              migrationDone({\n                status: 'ok'\n              });\n              return runOne();\n            }\n          });\n        };\n      })(this);\n      return runOne();\n    };\n\n    Migrator.prototype.migrate = function(done, progress) {\n      this._runWhenReady('up', done, progress);\n    };\n\n    Migrator.prototype.rollback = function(done, progress) {\n      if (this._lastDirection !== 'up') {\n        return done(new Error('Rollback can only be ran after migrate'));\n      }\n      this._runWhenReady('down', done, progress);\n    };\n\n    Migrator.prototype._loadMigrationFiles = function(dir, cb) {\n      return mkdirp(dir, 0x1fc, function(err) {\n        if (err) {\n          return cb(err);\n        }\n        return fs.readdir(dir, function(err, files) {\n          if (err) {\n            return cb(err);\n          }\n          files = files.filter(function(f) {\n            var ref1;\n            return ((ref1 = path.extname(f)) === '.js' || ref1 === '.coffee') && !f.startsWith('.');\n          }).map(function(f) {\n            var n, ref1;\n            n = (ref1 = f.match(/^(\\d+)/)) != null ? ref1[1] : void 0;\n            if (n) {\n              n = parseInt(n, 10);\n            } else {\n              n = null;\n            }\n            return {\n              number: n,\n              name: f\n            };\n          }).filter(function(f) {\n            return !!f.name;\n          }).sort(function(f1, f2) {\n            return f1.number - f2.number;\n          }).map(function(f) {\n            var fileName;\n            fileName = path.join(dir, f.name);\n            if (fileName.match(/\\.coffee$/)) {\n              require('coffee-script/register');\n            }\n            return {\n              number: f.number,\n              module: require(fileName)\n            };\n          });\n          return cb(null, files);\n        });\n      });\n    };\n\n    Migrator.prototype.runFromDir = function(dir, done, progress) {\n      return this._loadMigrationFiles(dir, (function(_this) {\n        return function(err, files) {\n          if (err) {\n            return done(err);\n          }\n          _this.bulkAdd(_.map(files, 'module'));\n          return _this.migrate(done, progress);\n        };\n      })(this));\n    };\n\n    Migrator.prototype.create = function(dir, id, done, coffeeScript) {\n      if (coffeeScript == null) {\n        coffeeScript = false;\n      }\n      return this._loadMigrationFiles(dir, function(err, files) {\n        var body, ext, fileName, maxNum, nextNum, ref1, ref2, slug;\n        if (err) {\n          return done(err);\n        }\n        maxNum = (ref1 = (ref2 = _.maxBy(files, 'number')) != null ? ref2.number : void 0) != null ? ref1 : 0;\n        nextNum = maxNum + 1;\n        slug = (id || '').toLowerCase().replace(/\\s+/, '-');\n        ext = coffeeScript ? 'coffee' : 'js';\n        fileName = path.join(dir, nextNum + \"-\" + slug + \".\" + ext);\n        body = migrationStub(id, coffeeScript);\n        return fs.writeFile(fileName, body, done);\n      });\n    };\n\n    Migrator.prototype.dispose = function(cb) {\n      var onSuccess;\n      this._isDisposed = true;\n      onSuccess = (function(_this) {\n        return function() {\n          var e, error;\n          try {\n            _this._db.close();\n            return typeof cb === \"function\" ? cb(null) : void 0;\n          } catch (error) {\n            e = error;\n            return typeof cb === \"function\" ? cb(e) : void 0;\n          }\n        };\n      })(this);\n      return this._dbReady.then(onSuccess, cb);\n    };\n\n    return Migrator;\n\n  })();\n\n  module.exports.Migrator = Migrator;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-mongodb-migrations/node_modules/mongodb-migrations/lib/utils.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var DEFAULT_COLLECTION, DEFAULT_POOL_SIZE, MongoClient, _, _buildOptions, urlBuilder, validateConnSettings;\n\n  MongoClient = require('mongodb').MongoClient;\n\n  urlBuilder = require('./url-builder');\n\n  _ = require('lodash');\n\n  DEFAULT_POOL_SIZE = 5;\n\n  DEFAULT_COLLECTION = '_migrations';\n\n  exports._buildOptions = _buildOptions = function(config) {\n    var options, poolSize;\n    options = config.options || {};\n    poolSize = config.poolSize;\n    if (poolSize != null) {\n      console.warn('The `poolSize` config param is deprecated.\\nUse `options: { server: { poolSize: poolSize} }` instead.');\n      if (_.get(options, 'server.poolSize')) {\n        console.warn('The `poolSize` is overriding the `options: { server: { poolSize: poolSize} }` value.');\n      }\n      _.set(options, 'server.poolSize', poolSize);\n    }\n    if (!_.get(options, 'server.poolSize')) {\n      _.set(options, 'server.poolSize', DEFAULT_POOL_SIZE);\n    }\n    return options;\n  };\n\n  validateConnSettings = function(config) {\n    var replicaset;\n    if (config.url) {\n      return;\n    }\n    replicaset = config.replicaset;\n    if (!replicaset) {\n      if (!config.host) {\n        throw new Error('`host` is required when `replicaset` is not set');\n      }\n    } else {\n      if (!(_.isObject(replicaset) && !_.isArray(replicaset))) {\n        throw new Error('`replicaset` is not an object');\n      }\n      if (!replicaset.name) {\n        throw new Error('`replicaset.name` is not set');\n      }\n      if (!_.isArray(replicaset.members)) {\n        throw new Error('`replicaset.members` is not set or is not an array');\n      }\n      replicaset.members.forEach(function(m) {\n        if (!(m != null ? m.host : void 0)) {\n          throw new Error('each of `replicaset.members` must have `host` set');\n        }\n      });\n    }\n    if (!config.db) {\n      throw new Error('`db` is not set');\n    }\n    if (config.password && !config.user) {\n      throw new Error('`password` provided but `user` is not');\n    }\n    if (config.authDatabase && !config.user) {\n      throw new Error('`authDatabase` provided but `user` is not');\n    }\n  };\n\n  exports.normalizeConfig = function(config) {\n    if (!(_.isObject(config) && !_.isArray(config))) {\n      throw new Error('`config` is not provided or is not an object');\n    }\n    _.defaults(config, {\n      collection: DEFAULT_COLLECTION\n    });\n    validateConnSettings(config);\n    return config;\n  };\n\n  exports.connect = function(config, cb) {\n    var options, url;\n    options = _buildOptions(config);\n    url = urlBuilder.buildMongoConnString(config);\n    return MongoClient.connect(url, options, cb);\n  };\n\n  exports.repeatString = function(str, n) {\n    return Array(n + 1).join(str);\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-mongodb-migrations/node_modules/mongodb-migrations/lib/url-builder.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var _, buildHost;\n\n  _ = require('lodash');\n\n  buildHost = function(opts) {\n    var host, port;\n    host = opts.host, port = opts.port;\n    if (port) {\n      host += ':' + port;\n    }\n    return host;\n  };\n\n  module.exports = {\n    buildMongoConnString: function(config) {\n      var hasUser, params, replicaset, s;\n      if (config.url) {\n        return config.url;\n      }\n      hasUser = !!config.user;\n      replicaset = config.replicaset;\n      s = \"mongodb://\";\n      if (hasUser) {\n        s += config.user;\n      }\n      if (config.password) {\n        if (!hasUser) {\n          throw new Error('`password` provided but `user` is not');\n        }\n        s += ':' + config.password;\n      }\n      if (hasUser) {\n        s += '@';\n      }\n      if (replicaset) {\n        s += replicaset.members.map(buildHost).join(',');\n      } else {\n        s += buildHost(config);\n      }\n      s += '/';\n      if (config.db) {\n        s += config.db;\n      }\n      params = [];\n      if (replicaset) {\n        params.push(\"replicaSet=\" + replicaset.name);\n      }\n      if (config.ssl) {\n        params.push('ssl=true');\n      }\n      if (config.authDatabase) {\n        params.push(\"authSource=\" + config.authDatabase);\n      }\n      if (params.length > 0) {\n        s += '?' + params.join('&');\n      }\n      return s;\n    }\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-mongodb-migrations/node_modules/mongodb-migrations/lib/migration-stub.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  module.exports = function(id, coffeeScript) {\n    if (coffeeScript) {\n      return \"module.exports.id = \\\"\" + id + \"\\\"\\n\\nmodule.exports.up = (done) ->\\n  # use @db for MongoDB communication, and @log() for logging\\n  done()\\n\\nmodule.exports.down = (done) ->\\n  # use @db for MongoDB communication, and @log() for logging\\n  done()\";\n    } else {\n      return \"'use strict';\\n\\nmodule.exports.id = \\\"\" + id + \"\\\";\\n\\nmodule.exports.up = function (done) {\\n  // use this.db for MongoDB communication, and this.log() for logging\\n  done();\\n};\\n\\nmodule.exports.down = function (done) {\\n  // use this.db for MongoDB communication, and this.log() for logging\\n  done();\\n};\";\n    }\n  };\n\n}).call(this);\n"}